package com.examportal.server.scheduler;

import com.examportal.server.Entity.ExamResult;
import com.examportal.server.Entity.User;
import com.examportal.server.Repositories.ExamResultRepository;
import com.examportal.server.Repositories.UserRepositoryImpl;
import com.examportal.server.Service.ExamService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@Component
public class ExamTimeCheckScheduler {

    private static final long ONE_MINUTE = 1;

    @Autowired
    private SimpMessagingTemplate messagingTemplate;

    @Autowired
    private ExamResultRepository examResultRepository;

    @Autowired
    private ExamService examService;

    @Autowired
    private UserRepositoryImpl userRepository;

    @Scheduled(fixedRate = 20000)
    @Transactional
    public void checkExamTimes() {

        LocalDateTime now = LocalDateTime.now();
        System.out.println("Running scheduled check for exam times at " + now);

        // --- Xử lý gửi cảnh báo 5 phút ---
        List<ExamResult> examsToWarn = examResultRepository.findExamsForWarning(now, now.plusMinutes(5));

        for (ExamResult examResult : examsToWarn) {
            try {
                int userId = examResult.getUserId().intValue();
                User user = userRepository.getUserById(userId);

                // Đích đến logic mà client đã đăng ký (phần sau '/user/')
                String destination = "/queue/notifications";

                // Tạo payload (Nên dùng Map hoặc DTO thay vì String JSON thủ công)
                Map<String, String> warningPayload = Map.of(
                        "type", "WARNING",
                        "message", "Còn dưới 5 phút làm bài!"
                );

                // SỬ DỤNG convertAndSendToUser
                messagingTemplate.convertAndSendToUser(user.getUsername(), destination, warningPayload);
                System.out.println("Sent 5-minute warning to user " + user.getUsername() + " for examResult " + examResult.getId());

                examResult.setWarningSent(true);
                examResultRepository.save(examResult);

            } catch (Exception e) {
                System.out.println("Error sending warning for examResult " + examResult.getId() + ": " + e.getMessage());
                e.printStackTrace();
            }
        }

        // --- Xử lý tự động nộp bài khi hết giờ ---
        LocalDateTime oneMinuteAgo = now.minusMinutes(ONE_MINUTE);
        List<ExamResult> expiredExams = examResultRepository.findExpiredExams(now, oneMinuteAgo);

        System.out.println("Đã gửi cảnh báo còn 5 phút cho " + examsToWarn.size() + " bài thi");
        System.out.println("Tìm thấy " + expiredExams.size() + " bài thi hết hạn cần xử lý");

        for (ExamResult examResult : expiredExams) {
            try {
                int userId = examResult.getUserId().intValue();
                User user = userRepository.getUserById(userId);


                if (Objects.equals(examResult.getExamType(), "upload") && !examResult.isSubmit()) {
                    examService.submitUploadExam(examResult.getExamId(), examResult.getUserId());
                } else {
                    examService.submitAutoGeneratedExam(examResult.getExamId(), examResult.getUserId());

                }

                // Gửi thông báo Force Submit cho client
                String destination = "/queue/notifications";
                Map<String, String> forceSubmitPayload = Map.of(
                        "type", "FORCE_SUBMIT",
                        "message", "Đã hết giờ làm bài. Hệ thống tự động nộp bài."
                );

                // SỬ DỤNG convertAndSendToUser
                messagingTemplate.convertAndSendToUser(user.getUsername(), destination, forceSubmitPayload);
                System.out.println("Sent force submit notification to user " + user.getUsername() + " for examResult " + examResult.getId());

            } catch (Exception e) {
                System.out.println("Error auto-submitting or notifying for examResult " + examResult.getId() + ": " + e.getMessage());
                e.printStackTrace();
            }
        }
        System.out.println("Finished scheduled check.");
    }
}